
# Global values
global:
  environment: production

# Backend configuration (Exposed via LoadBalancer)
backend:
  name: resource-monitor-backend
  image:
    repository: krupaht/resource-monitor-backend
    tag: latest
    pullPolicy: Always
  replicaCount: 2
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 500m
      memory: 1024Mi
  port: 8080
  service:
    type: LoadBalancer  # Expose backend via LoadBalancer
    port: 8080
  hpa:
    enabled: false
    minReplicas: 2
    maxReplicas: 2
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  env:
    NODE_ENV: production
  envFrom:
    - secretRef:
        name: db-credentials

# Frontend configuration (Exposed via LoadBalancer)
frontend:
  name: resource-monitor-frontend
  image:
    repository: krupaht/resource-monitor-frontend
    tag: latest
    pullPolicy: Always
  replicaCount: 2
  resources:
    requests:
      cpu: 50m
      memory: 64Mi
    limits:
      cpu: 200m
      memory: 256Mi
  port: 80
  service:
    type: LoadBalancer  # Expose frontend via LoadBalancer
    port: 80
  hpa:
    enabled: true
    minReplicas: 2
    maxReplicas: 5
    targetCPUUtilizationPercentage: 70
  env:
    VITE_BACKEND_URL: "http://4.156.43.86:8080"  # Use backend LoadBalancer IP when assigned

serviceAccount:
  create: false  # Change to 'true' if needed

# Ingress Configuration (Frontend Only)
ingress:
  enabled: false  # Disable ingress since we are using LoadBalancer for frontend

# Database configuration for Azure PostgreSQL
database:
  existingSecret: db-credentials  # Reference the Kubernetes Secret
  sslMode: require
dbCredentials:
  create: false

# Prometheus configuration for monitoring
prometheus:
  enabled: true
