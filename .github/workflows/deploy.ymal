name: Deploy Resource Monitor

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE_NAME: ${{ github.repository }}/resource-monitor-backend
  FRONTEND_IMAGE_NAME: ${{ github.repository }}/resource-monitor-frontend

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Backend
        id: meta-backend
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}

      - name: Build and push Backend Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Extract metadata (tags, labels) for Frontend
        id: meta-frontend
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}

      - name: Build and push Frontend Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.11.0'

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.26.0'

      - name: Configure Kubernetes
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG }}
          context: my-cluster-context
        
      - name: Deploy to Kubernetes
        run: |
          # Update values file with image tags
          sed -i "s|repository: your-registry/resource-monitor-backend|repository: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}|g" ./helm/resource-monitor/values.yaml
          sed -i "s|repository: your-registry/resource-monitor-frontend|repository: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}|g" ./helm/resource-monitor/values.yaml
          sed -i "s|tag: latest|tag: sha-${{ github.sha }}|g" ./helm/resource-monitor/values.yaml
          
          # Create namespace if it doesn't exist
          kubectl create namespace resource-monitor --dry-run=client -o yaml | kubectl apply -f -
          
          # Create database secrets
          kubectl create secret generic db-credentials \
            --namespace resource-monitor \
            --from-literal=username=${{ secrets.DB_USERNAME }} \
            --from-literal=password=${{ secrets.DB_PASSWORD }} \
            --dry-run=client -o yaml | kubectl apply -f -
          
          # Deploy with Helm
          helm upgrade --install resource-monitor ./helm/resource-monitor \
            --namespace resource-monitor \
            --values ./helm/resource-monitor/values.yaml \
            --set database.host=${{ secrets.DB_HOST }} \
            --set database.name=${{ secrets.DB_NAME }}
            
      - name: Verify deployment
        run: |
          kubectl rollout status deployment/resource-monitor-backend -n resource-monitor
          kubectl rollout status deployment/resource-monitor-frontend -n resource-monitor