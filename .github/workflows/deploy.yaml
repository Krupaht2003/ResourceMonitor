name: Resource Monitoring Tool CI/CD

on:
  push:
    branches: [ main ]
  
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'prod'
        type: choice
        options:
          - dev
          - prod 

env:
  REGISTRY: docker.io
  BACKEND_IMAGE_NAME: krupaht/resource-monitor-backend
  FRONTEND_IMAGE_NAME: krupaht/resource-monitor-frontend
  CHART_PATH: ./resource
  AKS_RESOURCE_GROUP: rg_techdemo
  AKS_CLUSTER_NAME: resource
  NAMESPACE: default

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest
          if [ -f techdemobackend/requirements.txt ]; then pip install -r techdemobackend/requirements.txt; fi

      - name: Run tests
        run: |

          cd techdemobackend/tests/
          pytest

  build:
    name: Build and Push Docker Images
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./techdemobackend
          file: ./techdemobackend/Dockerfile
          push: true
          tags: |
            docker.io/${{ secrets.DOCKERHUB_USERNAME }}/resource-monitor-backend:${{ github.sha }}
            docker.io/${{ secrets.DOCKERHUB_USERNAME }}/resource-monitor-backend:latest

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./techdemofinal
          file: ./techdemofinal/Dockerfile
          push: true
          tags: |
            docker.io/${{ secrets.DOCKERHUB_USERNAME }}/resource-monitor-frontend:${{ github.sha }}
            docker.io/${{ secrets.DOCKERHUB_USERNAME }}/resource-monitor-frontend:latest

  approval:
    name: Await Manual Approval
    if: github.event.inputs.environment == 'prod'
    runs-on: ubuntu-latest
    steps:
      - name: Await Approval
        run: |
          echo "Please approve this deployment in the Actions tab."
          sleep 300  # 5 minutes delay for manual intervention

  deploy:
    name: Deploy to AKS
    needs: build
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ env.AKS_RESOURCE_GROUP }}
          cluster-name: ${{ env.AKS_CLUSTER_NAME }}

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'

      - name: Deploy to AKS with Helm
        run: |
          sed -i "s|repository: .*krupaht/resource-monitor-backend.*|repository: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}|g" ${{ env.CHART_PATH }}/values.yaml
          sed -i "s|tag: .*krupaht/resource-monitor-backend.*|tag: ${{ github.sha }}|g" ${{ env.CHART_PATH }}/values.yaml
          sed -i "s|repository: .*krupaht/resource-monitor-frontend.*|repository: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}|g" ${{ env.CHART_PATH }}/values.yaml
          sed -i "s|tag: .*krupaht/resource-monitor-frontend.*|tag: ${{ github.sha }}|g" ${{ env.CHART_PATH }}/values.yaml
          
          helm upgrade --install resource-monitor ${{ env.CHART_PATH }} \
            --namespace ${{ env.NAMESPACE }} \
            --create-namespace \
            --set environment=${{ github.event.inputs.environment || 'dev' }} \
            --set techdemobackend.image.repository=${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }} \
            --set techdemobackend.image.tag=${{ github.sha }} \
            --set techdemofinal.image.repository=${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }} \
            --set techdemofinal.image.tag=${{ github.sha }} \
            --atomic \
            --timeout 5m

      - name: Verify deployment
        run: |
          kubectl get pods -n ${{ env.NAMESPACE }}
          echo "Waiting for all pods to be ready..."
          kubectl wait --for=condition=ready pods --all -n ${{ env.NAMESPACE }} --timeout=600s

         
      - name: Rollback on Failure
        if: failure()
        run: |
          LAST_REVISION=$(helm history resource-monitor -n ${{ env.NAMESPACE }} | tail -2 | head -1 | awk '{print $1}')
          echo "Rolling back to revision $LAST_REVISION"
          helm rollback resource-monitor $LAST_REVISION --namespace ${{ env.NAMESPACE }}

     
      - name: Send Email Notification on Rollback
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "Rollback Triggered for Resource Monitoring Tool"
          to: ${{ secrets.EMAIL_RECEIVER }}
          from: "Resource Monitoring Tool <${{ secrets.EMAIL_USERNAME }}>"
          body: |
            Rollback has been triggered in your CI/CD pipeline.
          
            Details:
            - Project: Resource Monitoring Tool
            - Environment: ${{ github.event.inputs.environment || 'dev' }}
            - Rolled back to revision: $LAST_REVISION
        
            Please investigate the cause promptly.       
  verify:
    name: Verify Deployment
    needs: deploy
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ env.AKS_RESOURCE_GROUP }}
          cluster-name: ${{ env.AKS_CLUSTER_NAME }}

      - name: Get service endpoint
        run: |
          ENDPOINT=$(kubectl get svc -n ${{ env.NAMESPACE }} resource-monitor-frontend -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          echo "Application is accessible at: http://$ENDPOINT"
          echo "ENDPOINT=$ENDPOINT" >> $GITHUB_ENV
          
      - name: Health check
        run: |
          sleep 30
          curl -f http://${{ env.ENDPOINT }}/api/health || exit 1
          echo "Health check succeeded!"
